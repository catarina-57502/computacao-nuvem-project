apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: usermanagement
spec:
  selector:
    app: mongo
  ports:
    - name: bd
      port: 27017
      targetPort: 27017
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - image: mongo
          name: mongo
          resources:
            requests:
              memory: "500Mi"
            limits:
              memory: "1000Mi"
          envFrom:
            - secretRef:
                name: mongo-secret
          ports:
            - containerPort: 27017
              name: mongo
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: mongo-pv-claim
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "adminoperationsserver"
  namespace: adminoperations
  labels:
    app: "adminoperationsserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "adminoperationsserver"
  template:
    metadata:
      labels:
        app: "adminoperationsserver"
    spec:
      containers:
        - name: "adminoperationsserver"
          image: "gcr.io/${PROJECT_ID}/adminoperationsserver"
          env:
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
          ports:
            - containerPort: 50051
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51051
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51051
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51051
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "adminoperationsserver"
  namespace: adminoperations
spec:
  type: ClusterIP
  selector:
    app: "adminoperationsserver"
  ports:
    - name: "server"
      port: 50051
      targetPort: 50051
    - name: prometheus
      protocol: TCP
      port: 51051
      targetPort: 51051
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "adminoperationsapi"
  namespace: adminoperations
  labels:
    app: "adminoperationsapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "adminoperationsapi"
  template:
    metadata:
      labels:
        app: "adminoperationsapi"
    spec:
      containers:
        - name: "adminoperationsapi"
          image: "gcr.io/${PROJECT_ID}/adminoperationsapi"
          env:
            - name: adminoperationsserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: adminoperationsserver
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
          ports:
            - containerPort: 5003
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5003
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5003
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5003
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "adminoperationsapi"
  namespace: adminoperations
spec:
  selector:
    app: "adminoperationsapi"
  ports:
    - name: "api"
      port: 5003
      targetPort: 5003
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: adminoperations
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: "/admin"
            pathType: Prefix
            backend:
              service:
                name: adminoperationsapi
                port:
                  number: 5003
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usermanagementserver-deployment
  namespace: usermanagement
  labels:
    app: usermanagementserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usermanagementserver
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  template:
    metadata:
      labels:
        app: usermanagementserver
    spec:
      containers:
        - name: usermanagementserver
          image: "gcr.io/${PROJECT_ID}/usermanagementserver"
          env:
          - name: MONGO_USERNAME
            valueFrom:
              secretKeyRef:
                name: mongo-secrets
                key: username.txt
          - name: MONGO_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongo-secrets
                key: password.txt
          ports:
            - containerPort: 50052
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51052
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51052
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51052
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
kind: Service
apiVersion: v1
metadata:
  name: usermanagementserversvc
  namespace: usermanagement
spec:
  type: ClusterIP
  selector:
    app: usermanagementserver
  ports:
    - name: server
      port: 50052
      targetPort: 50052
    - name: prometheus
      protocol: TCP
      port: 51052
      targetPort: 51052
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "usermanagementapi"
  namespace: usermanagement
  labels:
    app: "usermanagementapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "usermanagementapi"
  template:
    metadata:
      labels:
        app: "usermanagementapi"
    spec:
      containers:
        - name: "usermanagementapi"
          image: "gcr.io/${PROJECT_ID}/usermanagementapi"
          env:
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
          ports:
            - containerPort: 5004
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5004
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5004
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5004
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "usermanagementapi"
  namespace: usermanagement
spec:
  selector:
    app: "usermanagementapi"
  ports:
    - name: "api"
      port: 5004
      targetPort: 5004
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: usermanagement
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: "/user"
            pathType: Prefix
            backend:
              service:
                name: usermanagementapi
                port:
                  number: 5004
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "libraryserver"
  labels:
    app: "libraryserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "libraryserver"
  template:
    metadata:
      labels:
        app: "libraryserver"
    spec:
      containers:
        - name: "libraryserver"
          image: "gcr.io/${PROJECT_ID}/libraryserver"
          env:
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
            - name: searchesserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: searchesserver
          ports:
            - containerPort: 50053
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51053
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51053
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51053
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "libraryserver"
spec:
  selector:
    app: "libraryserver"
  ports:
    - name: "server"
      port: 50053
      targetPort: 50053
    - name: prometheus
      protocol: TCP
      port: 51053
      targetPort: 51053
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "libraryapi"
  labels:
    app: "libraryapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "libraryapi"
  template:
    metadata:
      labels:
        app: "libraryapi"
    spec:
      containers:
        - name: "libraryapi"
          image: "gcr.io/${PROJECT_ID}/libraryapi"
          env:
            - name: libraryserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: libraryserver
          ports:
            - containerPort: 5001
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5001
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5001
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5001
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "libraryapi"
spec:
  selector:
    app: "libraryapi"
  ports:
    - name: "api"
      port: 5001
      targetPort: 5001
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: "/library"
            pathType: Prefix
            backend:
              service:
                name: libraryapi
                port:
                  number: 5001
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "wishlistserver"
  labels:
    app: "wishlistserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "wishlistserver"
  template:
    metadata:
      labels:
        app: "wishlistserver"
    spec:
      containers:
        - name: "wishlistserver"
          image: "gcr.io/${PROJECT_ID}/wishlistserver"
          env:
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
            - name: searchesserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: searchesserver
          ports:
            - containerPort: 50058
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51058
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51058
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51058
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "wishlistserver"
spec:
  selector:
    app: "wishlistserver"
  ports:
    - name: "server"
      port: 50058
      targetPort: 50058
    - name: prometheus
      protocol: TCP
      port: 51058
      targetPort: 51058
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "wishlistapi"
  labels:
    app: "wishlistapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "wishlistapi"
  template:
    metadata:
      labels:
        app: "wishlistapi"
    spec:
      containers:
        - name: "wishlistapi"
          image: "gcr.io/${PROJECT_ID}/wishlistapi"
          env:
            - name: wishlistserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: wishlistserver
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
          ports:
            - containerPort: 5002
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5002
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5002
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5002
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "wishlistapi"
spec:
  selector:
    app: "wishlistapi"
  ports:
    - name: "api"
      port: 5002
      targetPort: 5002
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: "/wishes"
            pathType: Prefix
            backend:
              service:
                name: wishlistapi
                port:
                  number: 5002
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "suggestionsserver"
  labels:
    app: "suggestionsserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "suggestionsserver"
  template:
    metadata:
      labels:
        app: "suggestionsserver"
    spec:
      containers:
        - name: "suggestionsserver"
          image: "gcr.io/${PROJECT_ID}/suggestionsserver"
          ports:
            - containerPort: 50059
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51059
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51059
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51059
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "suggestionsserver"
spec:
  selector:
    app: "suggestionsserver"
  ports:
    - name: "server"
      port: 50059
      targetPort: 50059
    - name: prometheus
      protocol: TCP
      port: 51059
      targetPort: 51059
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "suggestionsapi"
  labels:
    app: "suggestionsapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "suggestionsapi"
  template:
    metadata:
      labels:
        app: "suggestionsapi"
    spec:
      containers:
        - name: "suggestionsapi"
          image: "gcr.io/${PROJECT_ID}/suggestionsapi"
          env:
            - name: suggestionsserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: suggestionsserver
          ports:
            - containerPort: 5008
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5008
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5008
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5008
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "suggestionsapi"
spec:
  selector:
    app: "suggestionsapi"
  ports:
    - name: "api"
      port: 5008
      targetPort: 5008
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: "/suggestions"
            pathType: Prefix
            backend:
              service:
                name: suggestionsapi
                port:
                  number: 5008
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "searchesserver"
  labels:
    app: "searchesserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "searchesserver"
  template:
    metadata:
      labels:
        app: "searchesserver"
    spec:
      containers:
        - name: "searchesserver"
          image: "gcr.io/${PROJECT_ID}/searchesserver"
          ports:
            - containerPort: 50079
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51079
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51079
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51079
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "searchesserver"
spec:
  type: ClusterIP
  selector:
    app: "searchesserver"
  ports:
    - name: "server"
      port: 50079
      targetPort: 50079
    - name: prometheus
      protocol: TCP
      port: 51079
      targetPort: 51079
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "searchesapi"
  labels:
    app: "searchesapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "searchesapi"
  template:
    metadata:
      labels:
        app: "searchesapi"
    spec:
      containers:
        - name: "searchesapi"
          image: "gcr.io/${PROJECT_ID}/searchesapi"
          env:
            - name: searchesserver_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: searchesserver
          ports:
            - containerPort: 5078
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5078
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5078
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5078
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "searchesapi"
spec:
  selector:
    app: "searchesapi"
  ports:
    - name: "api"
      port: 5078
      targetPort: 5078
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: "/searches"
            pathType: Prefix
            backend:
              service:
                name: searchesapi
                port:
                  number: 5078
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reviews-api-d
  labels:
    app: reviews-api
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: reviews-api
  template:
    metadata:
      labels:
        app: reviews-api
    spec:
      containers:
        - name: reviews-api
          image: "gcr.io/${PROJECT_ID}/reviews-api"
          env:
            - name: reviews-server-s_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: reviews-server-s
            - name: usermanagementserversvc_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: usermanagementserversvc
          ports:
            - containerPort: 5012
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5012
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5012
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: 5012
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: reviews-api-s
  labels:
    app: reviews-api
spec:
  selector:
    app: reviews-api
  ports:
    - name: http
      port: 5012
      targetPort: 5012
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
        - path: "/reviews"
          pathType: Prefix
          backend:
            service:
              name: reviews-api-s
              port:
                number: 5012
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reviews-server-d
  labels:
    app: reviews-server
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: reviews-server
  template:
    metadata:
      labels:
        app: reviews-server
    spec:
      containers:
        - name: reviews-server
          image: "gcr.io/${PROJECT_ID}/reviews-server"
          ports:
            - containerPort: 50060
          livenessProbe:
            httpGet:
              path: /metrics
              port: 51060
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /metrics
              port: 51060
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 20
          startupProbe:
            httpGet:
              path: /metrics
              port: 51060
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            failureThreshold: 30
---
apiVersion: v1
kind: Service
metadata:
  name: reviews-server-s
  labels:
    app: reviews-server
spec:
  selector:
    app: reviews-server
  ports:
    - name: http
      port: 50060
      targetPort: 50060
    - name: prometheus
      protocol: TCP
      port: 51060
      targetPort: 51060
